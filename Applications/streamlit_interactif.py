import pandas as pd
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from sklearn.preprocessing import MinMaxScaler
import shap
from shap import TreeExplainer, Explainer
import plotly.express as px
import plotly.graph_objects as go
import requests
import os
import io
st.set_option('deprecation.showPyplotGlobalUse', False)


# Chargement du mod√®le depuis un fichier pickle
model_local_path = "C:/Users/colin/Documents/Formation_Openclassrooms/Projet7_Impl√©mentezUnMod√®leDeScoring/basic_lgbmc.pkl"
model_github_url = "https://github.com/colple/Implementez_un_modele_de_scoring/raw/main/basic_lgbmc.pkl"

try:
    with open(model_local_path, 'rb') as model_file:
        model = pickle.load(model_file)
except:
    response = requests.get(model_github_url)
    if response.status_code == 200:
        model_bytes = io.BytesIO(response.content)
        model = pickle.load(model_bytes)
    else:
        st.error(f"Le chargement du mod√®le depuis GitHub a √©chou√© avec le code d'√©tat {response.status_code}")
        st.stop()


# D√©finition de l'URL de l'API
api_url = "https://modele-scoring-credits-c459a33a2133.herokuapp.com/predict"

# D√©claration de la variable uploaded_file en dehors de la fonction afin de permettre le chargement d'un jeu de donn√©es
uploaded_file = None

# Chargement du jeu de donn√©es au lancement de l'application
@st.cache_data
def load_data():
    if uploaded_file is not None:
        # Chargement depuis le fichier t√©l√©charg√©
        return pd.read_csv(uploaded_file, sep=",")
    
    # Chargement depuis GitHub
    github_url = "https://github.com/colple/Implementez_un_modele_de_scoring/blob/main/Datas/testset_rfe_30f.csv?raw=true"
    try:
        return pd.read_csv(github_url, sep=",")
    except Exception as e:
        # En cas d'√©chec, essaie de charger localement
        local_path = "C:/Users/colin/Documents/Formation_Openclassrooms/Projet7_Impl√©mentezUnMod√®leDeScoring/testset_rfe_30f.csv"
        try:
            return pd.read_csv(local_path, sep=",")
        except FileNotFoundError:
            st.error(f"Le chargement des donn√©es a √©chou√© avec l'erreur : {str(e)}")
            st.stop()

# Chargement des donn√©es
df_complet = load_data()

# Copie du fichier avant normalisation des donn√©es
df_complet_scaled = df_complet.copy()

# Chargement du scaler avec pickle
minmax_scaler_local_path = "C:/Users/colin/Documents/Formation_Openclassrooms/Projet7_Impl√©mentezUnMod√®leDeScoring/minmax_scaler.pkl"
minmax_scaler_github_url = "https://github.com/colple/Implementez_un_modele_de_scoring/blob/main/minmax_scaler.pkl?raw=true"

try:
    loaded_minmax = pickle.load(open(minmax_scaler_local_path, 'rb'))
except:
    response = requests.get(minmax_scaler_github_url)
    if response.status_code == 200:
        minmax_scaler_bytes = io.BytesIO(response.content)
        loaded_minmax = pickle.load(minmax_scaler_bytes)
    else:
        st.error(f"Le chargement du MinMax Scaler depuis GitHub a √©chou√© avec le code d'√©tat {response.status_code}")
        st.stop()


# Retrait de la colonne "SK_ID_CURR" si elle est pr√©sente
if 'SK_ID_CURR' in df_complet_scaled.columns:
    df_complet_scaled.drop('SK_ID_CURR', axis=1, inplace=True)

# Normalisation avec le MinMax Scaler du jeu d'entra√Ænement
df_complet_scaled_values = loaded_minmax.transform(df_complet_scaled)

# Cr√©ation d'un nouveau Dataframe avec les valeurs transform√©es
df_complet_scaled = pd.DataFrame(df_complet_scaled_values, columns=df_complet_scaled.columns)

# Ajout la colonne SK_ID_CURR
df_complet_scaled["SK_ID_CURR"] = df_complet["SK_ID_CURR"]

#########################################################################################################
# TITRE PRINCIPAL DE LA PAGE
#########################################################################################################

custom_css = """
<style>
    .custom-title {
        font-family: Verdana, sans-serif;
        font-size: 32px;
        font-weight: bold;
        margin-top: -76px;
    }
</style>
"""
st.markdown(custom_css, unsafe_allow_html=True)

# Titre personnalis√©
st.markdown('<div class="custom-title">D√©cision sur l\'octroi du pr√™t</div>', unsafe_allow_html=True)

###############################################################################################################
# BARRE LATERALE
###############################################################################################################

# Logo de la soci√©t√©
st.sidebar.image("logo_pret_a_depenser.png", use_column_width=True)

# Texte introductif
st.sidebar.markdown('<h2 style="font-family: Verdana, sans-serif; font-size: 18px;">Bienvenue dans notre soci√©t√© proposant des pr√™ts √† la consommation en toute transparence.</h2>', unsafe_allow_html=True)

# Ligne vide pour la cr√©ation d'un espace
st.sidebar.text("")

# Chargement des donn√©es non standardis√©es
with st.sidebar:
    uploaded_file = st.file_uploader("Uploader un fichier CSV", type=["csv"])

# Cr√©ation d'un curseur pour le zoom dans la barre lat√©rale
with st.sidebar:
    st.write("<p style='font-size: 14px; font-weight: bold; margin: 0;'>Zoom</p>", unsafe_allow_html=True)
    zoom_level = st.sidebar.slider("", 50, 400, 100)

# Utilisation de CSS personnalis√© pour appliquer le zoom dans la barre lat√©rale
st.sidebar.markdown(
    f"""
    <style>
        .sidebar .sidebar-content {{
            transform: scale({zoom_level / 100.0});
            transform-origin: top left;
        }}
    </style>
    """,
    unsafe_allow_html=True
)

# Utilisation de CSS personnalis√© pour l'application du zoom au contenu principal
st.markdown(
    f"""
    <style>
        div.stApp {{
            transform: scale({zoom_level / 100.0});
            transform-origin: top left;
        }}
    </style>
    """,
    unsafe_allow_html=True)

# Ligne vide pour la cr√©ation d'un espace
st.sidebar.text("")

# Personnalisation de la largeur de la bo√Æte de s√©lection avec des balises HTML et CSS
st.write("""
<style>
div[data-baseweb="select"] {
    width: 280px;  
    margin: 0; 
}
</style>
""", unsafe_allow_html=True)

# Fonction permettant d'afficher si le cr√©dit est accept√© ou non
def is_credit_accepted(classe):
    if classe == 0:
        return "Accept√©"
    else:
        return "Refus√©"

# Cr√©ation d'une bo√Æte de s√©lection pour les clients avec le texte personnalis√©
with st.sidebar:
    st.write("<p style='font-size: 14px; font-weight: bold; margin: 0;'>S√©lectionnez un client par identifiant :</p>", unsafe_allow_html=True)  
    selected_client = st.selectbox("", df_complet['SK_ID_CURR'].tolist())

##############################################################################################################
# CONTENU DE LA PAGE PRINCIPALE
##############################################################################################################

df_api = df_complet.copy()

api_data = {
    "dataframe_split": {
        "index": df_api.index.tolist(),
        "columns": df_api.columns.tolist(),
        "data": df_api.values.tolist()
    }
}

headers = {'Content-Type': 'application/json'}

# Envoi de la requ√™te √† l'API
response = requests.post(api_url, json=api_data, headers=headers)

# Traitement de la r√©ponse par l'API
if response.status_code == 200:
    api_response = response.json()
    
    # Extraction des colonnes pr√©dites de la r√©ponse de l'API
    results_target_best = api_response['target']
    class_0_proba = api_response['class_0_proba']
    class_1_proba = api_response['class_1_proba']

    # Ajout des colonnes pr√©dites au dataFrame df_api
    df_api['target'] = results_target_best
    df_api['class_0_proba'] = class_0_proba
    df_api['class_1_proba'] = class_1_proba


# Ajout des colonnes dans le dataframe original standardis√©
df_complet_scaled["Prediction_Class_0"] = df_api['class_0_proba']  
df_complet_scaled["Prediction_Class_1"] = df_api['class_1_proba']
df_complet_scaled["Classe"] = df_api['target']

# Ajout des colonnes dans le dataframe original non standardis√©
df_complet["Prediction_Class_0"] = df_api['class_0_proba']  
df_complet["Prediction_Class_1"] = df_api['class_1_proba']
df_complet["Classe"] = df_api['target']


#############################################################################################################
# PREMIERE PARTIE DE LA PAGE PRINCIPALE
#############################################################################################################

# Division en 3 colonnes de taille in√©gale
col1, col2, col3 = st.columns([1,2,1])

###############################################
# D√©cision et demande d'une donn√©e sp√©cifique
###############################################

# Pr√©diction sp√©cifique du client s√©lectionn√©
if selected_client:
    client_data = df_complet[df_complet['SK_ID_CURR'] == selected_client]
    client_prediction = client_data['Classe'].values[0]
    credit_status = is_credit_accepted(client_prediction)

    # D√©finition de la taille du texte en utilisant du CSS
    style = "font-size: 24px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: -340px; margin-top:-525px"
    st.markdown(f"<p style='{style}'>Cr√©dit : {credit_status}</p>", unsafe_allow_html=True)
    
    with col1:    
        # D√©finition de la taille de l'emoji en utilisant du CSS
        emoji_style = "font-size: 48px; margin-left: -340px;"

        # Affichage d'un pouce en l'air jaune si le cr√©dit est accept√©
        if credit_status == "Accept√©":
            st.markdown(f"<p style='{emoji_style}'>üëç</p>", unsafe_allow_html=True)
        # Affichage d'un pouce en bas si le cr√©dit est refus√©
        else:
            st.markdown(f"<p style='{emoji_style}'>üëé</p>", unsafe_allow_html=True)

    # Accessibilit√© des donn√©es du client sous la forme d'une selectbox pr√©sente dans la barre lat√©rale
        style_1bis = "font-size: 24px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: -340px; margin-top:0px"
        st.markdown(f"<p style='{style_1bis}'>Vos donn√©es</p>", unsafe_allow_html=True)
    
    with st.sidebar:
        st.write("<p style='font-size: 14px; font-weight: bold; margin: 0;'>S√©lectionnez une donn√©e personnelle:</p>", unsafe_allow_html=True)  
        columns_to_remove = ["SK_ID_CURR", "SK_ID_CURR", "Prediction_Class_0", "Prediction_Class_1","Classe"]
        personal_data = st.selectbox("", client_data.drop(columns=columns_to_remove).columns)
    
    with col1:   
        # Donn√©e demand√©e
        style_1ter = "font-size: 20px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: -340px; margin-top:0px"
        st.markdown(f"<p style='{style_1ter}'>Voici la donn√©e demand√©e</p>", unsafe_allow_html=True)
        style_1q = "font-size: 18px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: -340px; margin-top:0px"
        st.write(f"<p style='{style_1q}'>{personal_data} : {client_data[personal_data].values[0]}</p>", unsafe_allow_html=True)
    

#######################################
# Les valeurs de SHAPLEY locales
#######################################

    # D√©finition de la taille du texte en utilisant du CSS
    style_2 = "font-size: 24px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: +50px; margin-top:-545px"

    # Affichage de l'explication
    explanation = "Principaux facteurs contribuant √† la d√©cision"
    st.markdown(f"<p style='{style_2}'> {explanation}</p>", unsafe_allow_html=True)

    with col2:
        # Calcul des valeurs SHAP √† partir du dataFrame original standardis√©
        shap_df = df_complet_scaled[df_complet_scaled['SK_ID_CURR'] == selected_client].drop(["SK_ID_CURR", "Prediction_Class_0", "Prediction_Class_1", "Classe"], axis=1)
        explainer = shap.TreeExplainer(model)

        # Pr√©diction pour le client s√©lectionn√©
        shap_df_client = client_data.drop(["SK_ID_CURR", "Prediction_Class_0", "Prediction_Class_1", "Classe"], axis=1)
        shap_values = explainer(shap_df_client, check_additivity=False)

        # Obtention de la pr√©diction pour le client
        prediction_shap = model.predict_proba(shap_df_client)[0]

        # Affichage des valeurs SHAP pour la pr√©diction locale
        fig_shap_client = shap.plots._waterfall.waterfall_legacy(explainer.expected_value[0], shap_values[0].values[:, 0], shap_df_client.iloc[0], max_display=11)
    
        # Affichage du graphique
        st.pyplot(fig_shap_client)

#######################################################################
# Positionnement par rapport aux autres clients et autres informations
#######################################################################

with col3:
    
    # Utilisation du  mod√®le pour l'obtention des probabilit√©s pr√©dites
    probas = model.predict_proba(df_complet_scaled.drop(["SK_ID_CURR", "Prediction_Class_0", "Prediction_Class_1","Classe"], axis=1))

    # Obtention des probabilit√©s associ√©es √† chaque classe
    class_0_probas = probas[:, 0]
    class_1_probas = probas[:, 1]

    def create_prediction_gauge(class_0_prob, class_1_prob):
    
        fig = go.Figure()

        # Cr√©ation de la jauge comportant 2 couleurs selon le seuil m√©tier
        fig.add_trace(go.Indicator(
            mode="gauge+number",
            value=class_1_prob,
            domain={"x": [0.1, 0.6], "y": [0.55, 1]},
            gauge={
                "axis": {"range": [0, 1], "showticklabels": False},
                "bar": {"color": "black", "thickness": 0.15},
                "steps": [
                    {"range": [0, 0.2222], "color": "#FFFF00"},  # Quadrant jaune
                    {"range": [0.2222, 1], "color": "#FF0000"},  # Quadrant rouge
                ],
            }
        ))

        # Ajout du titre Positionnement au-dessus de la jauge
        fig.add_annotation(
            x=0.35, y=1.38,
            text="Positionnement",
            showarrow=False,
            font=dict(size=24, family="Verdana, sans-serif", color="black")
        )

        # Ajout du seuil d'octroi (seuil m√©tier)
        fig.add_annotation(
            x=0.35, y=1.25,
            text="Seuil d'octroi:0.2222",
            showarrow=False,
            font=dict(size=18, family="Verdana, sans-serif", color="black")
        )

        # Ajout des annotations de texte pour les √©tiquettes
        fig.add_annotation(
            x=0.12, y= 0.85,
            text="Accord",
            showarrow=False,
            font=dict(size=18, family="Verdana, sans-serif", color="black"),
            textangle= -70
        )

        fig.add_annotation(
            x=0.18, y=1.1,
            text="Refus",
            showarrow=False,
            font=dict(size=18, family="Verdana, sans-serif", color="black"),
            textangle= -35
        )
        return fig

    # Obtention des probabilit√©s pour le client s√©lectionn√©
    if selected_client:
        client_index = df_complet_scaled[df_complet_scaled['SK_ID_CURR'] == selected_client].index[0]
        class_0_prob = class_0_probas[client_index]
        class_1_prob = class_1_probas[client_index]

        # Cr√©ation de la jauge pour le client s√©lectionn√© en passant les probabilit√©s des classes pr√©dites
        st.plotly_chart(create_prediction_gauge(class_0_prob,class_1_prob))

###################################################
# DEUXIEME PARTIE: LES VALEURS DE SHAPLEY GLOBALES
# #################################################

# Ligne de s√©paration avec des styles CSS personnalis√©s
line_style_1 = "height: 2px; background-color: #000; margin: -150px 0; width: 100%;"
st.markdown(f"<hr style='{line_style_1}'>", unsafe_allow_html=True)

style_3 = "font-size: 24px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: 140px; margin-top:-50px"
st.markdown(f"<p style='{style_3}'>L'importance des donn√©es</p>", unsafe_allow_html=True)

@st.cache_data  # Mise en cache de la fonction pour qu'elle ne soit pas recalcul√©e √† chaque rafra√Æchissement de la page
def calculate_shap_values(df_complet_scaled):
    # Calcul des valeurs SHAP globales √† l'aide du TreeExplainer
    shap_values_global = explainer.shap_values(df_complet_scaled.drop(["SK_ID_CURR", "Prediction_Class_0", "Prediction_Class_1","Classe"], axis=1))
    
    # Obtention des valeurs SHAP moyennes pour chaque variable
    mean_shap_values = np.abs(shap_values_global[0]).mean(axis=0)
    
    # Tri des variables par ordre d√©croissant en fonction de leur valeur SHAP moyenne
    sorted_indices = mean_shap_values.argsort()[-30:]
    
    return mean_shap_values, sorted_indices

# Utilisation de la fonction mise en cache pour calculer les valeurs SHAP
mean_shap_values, sorted_indices = calculate_shap_values(df_complet_scaled)

# Cr√©ation du graphique barh pour afficher les valeurs SHAP globales des 30 variables
fig, ax = plt.subplots(figsize=(60, 60))
ax.barh(range(30), mean_shap_values[sorted_indices], color='dodgerblue')
ax.set_yticks(range(30))
ax.set_yticklabels(df_complet_scaled.drop(["SK_ID_CURR", "Prediction_Class_0", "Prediction_Class_1","Classe"], axis=1).columns[sorted_indices], fontsize=40)
st.pyplot(fig)

########################################################
# TROISIEME PARTIE: VISUALISATION DE CERTAINES DONNES
# ######################################################

# Ligne de s√©paration avec des styles CSS personnalis√©s
line_style = "height: 2px; background-color: #000; margin-top: -0x 0; width: 100%;"
st.markdown(f"<hr style='{line_style}'>", unsafe_allow_html=True)

# S√©lection du client via une selectbox
selected_client_id = selected_client  # L'ID du client s√©lectionn√©
selected_client_data = df_complet[df_complet['SK_ID_CURR'] == selected_client_id]

# Liste des noms de graphiques
graphiques_disponibles = ["Montant du cr√©dit selon l'√¢ge", "Montant du cr√©dit selon le revenu", "Annuit√© selon le montant du cr√©dit", "Nombre de cr√©dits pr√©c√©demment accept√©s en fonction de l'√¢ge"]

with st.sidebar:    
    st.write("<p style='font-size: 14px; font-weight: bold; margin: 0;'>S√©lectionnez les graphiques √† afficher:</p>", unsafe_allow_html=True)  
    selected_graphiques = st.multiselect("", graphiques_disponibles)

style_4 = "font-size: 24px; font-family: Verdana, sans-serif; font-weight: bold; margin-left: 40px; margin-top:10px"
st.markdown(f"<p style='{style_4}'>Visualisation interactive de certaines donn√©es</p>", unsafe_allow_html=True)

if "Montant du cr√©dit selon l'√¢ge" in selected_graphiques:

    # Cr√©ation d'une colonne D√©cision comportant Refus ou Accord
    df_complet['D√©cision'] = df_complet['Classe'].apply(lambda x: 'Accord' if x == 0 else 'Refus')

    # Cr√©ation du code couleur
    color_map = {'Accord': 'dodgerblue', 'Refus': 'red'}
    fig_age_credit = go.Figure()
    
    # Ajout de la dispersion pour "Refus" et "Accord"
    fig_age_credit.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Refus']['AGE'],
                                             y=df_complet[df_complet['D√©cision'] == 'Refus']['AMT_CREDIT'],
                                             mode='markers',
                                             marker=dict(size=5, color='red'),
                                             name="Refus"))
    
    fig_age_credit.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Accord']['AGE'],
                                             y=df_complet[df_complet['D√©cision'] == 'Accord']['AMT_CREDIT'],
                                             mode='markers',
                                             marker=dict(size=5, color='dodgerblue'),
                                             name="Accord"))

    # Obtention des valeurs pour le client s√©lectionn√©
    selected_client_age = selected_client_data["AGE"].values[0]
    selected_client_credit_amount = selected_client_data['AMT_CREDIT'].values[0]

    # Ajout de l'emplacement du client s√©lectionn√©
    fig_age_credit.add_trace(go.Scattergl(x=[selected_client_age], y=[selected_client_credit_amount],
                                         mode='markers',
                                         marker=dict(size=10, color='yellow', line=dict(width=2, color='black')),
                                         name="VOUS"))

    # Personnalisation des titres et de la l√©gende
    fig_age_credit.update_layout(title="MONTANT DU CREDIT SELON L'AGE",
                                xaxis_title="AGE",
                                yaxis_title="MONTANT DU CREDIT", 
                                legend_title_text="DECISION")

    # Affichage du graphique interactif
    st.plotly_chart(fig_age_credit)

if "Montant du cr√©dit selon le revenu" in selected_graphiques:

    # Cr√©ation d'une colonne D√©cision comportant Refus ou Accord
    df_complet['D√©cision'] = df_complet['Classe'].apply(lambda x: 'Accord' if x == 0 else 'Refus')

    # Cr√©ation du code couleur
    color_map= {'Accord': 'dodgerblue', 'Refus': 'red'}
    fig_income_credit = go.Figure()

    # Ajout de la dispersion pour "Refus" et "Accord"
    fig_income_credit.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Refus']['AMT_INCOME_TOTAL'],
                                             y=df_complet[df_complet['D√©cision'] == 'Refus']['AMT_CREDIT'],
                                             mode='markers',
                                             marker=dict(size=5, color='red'),
                                             name="Refus"))
    
    fig_income_credit.add_trace(go.Scattergl(x=df_complet[df_complet["D√©cision"]== 'Accord']['AMT_INCOME_TOTAL'],
                                             y=df_complet[df_complet["D√©cision"]== 'Accord']['AMT_CREDIT'],
                                             mode='markers',
                                             marker=dict(size=5, color="dodgerblue"),
                                             name="Accord"))

    # Obtention des valeurs pour le client s√©lectionn√©
    selected_client_income = selected_client_data['AMT_INCOME_TOTAL'].values[0]
    selected_client_credit_amount = selected_client_data['AMT_CREDIT'].values[0]

    # Ajout de l'emplacement du client s√©lectionn√©
    fig_income_credit.add_trace(go.Scattergl(x=[selected_client_income], y=[selected_client_credit_amount], 
                                            mode='markers',
                                            marker=dict(size=10, color='yellow', line=dict(width=2, color='black')),  
                                            name="VOUS"))
    
    # Personnalisation des titres et de la l√©gende
    fig_income_credit.update_layout(title="MONTANT DU CREDIT SELON LE REVENU",
                                    xaxis_title="REVENU",
                                    yaxis_title="MONTANT DU CREDIT",
                                    legend_title_text="DECISION")

    # Affichage du graphique interactif
    st.plotly_chart(fig_income_credit)

if "Annuit√© selon le montant du cr√©dit" in selected_graphiques:
    
    # Cr√©ation d'une colonne D√©cision comportant Refus ou Accord
    df_complet['D√©cision'] = df_complet['Classe'].apply(lambda x: 'Accord' if x == 0 else 'Refus')

    # # Cr√©ation du code couleur
    color_map = {'Accord': 'dodgerblue', 'Refus': 'red'}
    fig_annuity_credit = go.Figure()

    # Ajout de la dispersion pour "Refus" et "Accord"
    fig_annuity_credit.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Refus']['AMT_CREDIT'],
                                             y=df_complet[df_complet['D√©cision'] == 'Refus']['AMT_ANNUITY'],
                                             mode='markers',
                                             marker=dict(size=5, color='red'),
                                             name="Refus"))
    
    fig_annuity_credit.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Accord']['AMT_CREDIT'],
                                             y=df_complet[df_complet['D√©cision'] == 'Accord']['AMT_ANNUITY'],
                                             mode='markers',
                                             marker=dict(size=5, color='dodgerblue'),
                                             name="Accord"))
    
    # Obtention des valeurs pour le client s√©lectionn√©
    selected_client_annuity = selected_client_data["AMT_ANNUITY"].values[0]
    selected_client_credit_amount = selected_client_data['AMT_CREDIT'].values[0]

    # Ajout de l'emplacement du client s√©lectionn√©
    fig_annuity_credit.add_trace(go.Scattergl(x=[selected_client_credit_amount], y=[selected_client_annuity],
                                         mode='markers',
                                         marker=dict(size=10, color='yellow', line=dict(width=2, color='black')),
                                         name="VOUS"))

    # Personnalisation des titres et de la l√©gende
    fig_annuity_credit.update_layout(title="ANNUITE SELON LE MONTANT DU CREDIT",
                                    xaxis_title="MONTANT DU CREDIT",
                                    yaxis_title="ANNUITE",
                                    legend_title_text="DECISION")

    # Affichage du graphique interactif
    st.plotly_chart(fig_annuity_credit)

    
if "Nombre de cr√©dits pr√©c√©demment accept√©s en fonction de l'√¢ge" in selected_graphiques:

    # Cr√©ation de la colonne D√©cision comportant Refus ou Accord
    df_complet['D√©cision'] = df_complet["Classe"].apply(lambda x: 'Accord' if x == 0 else 'Refus')

    # Cr√©ation du code couleur
    color_map= {'Accord': 'dodgerblue', 'Refus': 'red'}
    fig_loans_age = go.Figure()
    
    # Ajout de la dispersion pour "Refus" et "Accord"
    fig_loans_age.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Refus']["AGE"],
                                        y= df_complet[df_complet['D√©cision'] == 'Refus']["total_accepted_loans"],
                                        mode= "markers",
                                        marker=dict(size=5, color='red'),
                                        name="Refus"))
    
    fig_loans_age.add_trace(go.Scattergl(x=df_complet[df_complet['D√©cision'] == 'Accord']["AGE"],
                                        y= df_complet[df_complet['D√©cision'] == 'Accord']["total_accepted_loans"],
                                        mode= "markers",
                                        marker=dict(size=5, color='dodgerblue'),
                                        name="Accord"))

    # Obtention des valeurs pour le client s√©lectionn√©
    selected_client_age = selected_client_data["AGE"].values[0]
    selected_client_total_loans = selected_client_data["total_accepted_loans"].values[0]

    # Ajout de l'emplacement du client s√©lectionn√©
    fig_loans_age.add_trace(go.Scattergl(x=[selected_client_age], y=[selected_client_total_loans], 
                                       mode='markers',
                                       marker=dict(size=10, color='yellow', line=dict(width=2, color='black')),
                                       name="VOUS"))

    # Personnalisation des titres et de la l√©gende
    fig_loans_age.update_layout(title="NOMBRE DE CREDITS PRECEDEMMENT ACCEPTES SELON L'AGE",
                                xaxis_title="AGE",
                                yaxis_title="NOMBRE DE CREDITS",
                                legend_title_text="DECISION")

    # Affichage du graphique interactif
    st.plotly_chart(fig_loans_age)